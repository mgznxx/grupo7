{
  "name": "g_federalcode",
  "version": "1.0.0",
  "description": "<h1>Equipo: federalCode</h1>\r <h3>Integrantes:</h3>\r <h2>\r <p>| ‚úî Clarisa Espertino |</p>\r <p>| ‚úî Andrea Llavel     |</p> \r <p> |‚úî Rosa Maria Mari√±o |</p>\r </h2>\r # Missions 1:\r <p>\r Eres la nueva incorporaci√≥n a la Agencia Digital ‚ÄúLos Patos\r Programadores ü¶Ü‚Äù y como primer proyecto te han asignado el\r desarrollo de una tienda en l√≠nea de las conocidas figuras coleccionables\r Funko y merchandising adicional como remeras, llaveros y mucho m√°s.\r Al ser tu primer proyecto se te acompa√±ar√° en todo el proceso de\r desarrollo, gui√°ndote en el paso a paso y brind√°ndote las herramientas\r necesarias para que puedas llevarlo adelante junto con el resto del\r equipo.\r # Mission#2 üöÄ\r <p>¬°Continuamos trabajando en nuestro proyecto!\r Ahora que contamos con la estructura HTML del proyecto el pr√≥ximo\r paso es comenzar a maquetar y estilar mediante CSS todos los\r elementos de cada p√°gina.</p>\r # Mission#3 ÔøΩ\r <p>\r   Para este mission tenemos dos retos a resolver:\r ‚óè Implementar el slider en las p√°ginas de home e √≠tem.\r ‚óè Darle funcionalidad a los botones de + y ‚Äì en las p√°ginas de √≠tem y\r carrito.\r Utilizaremos la librer√≠a GlideJS donde deber√°s adaptar el html que hayas\r utilizado anteriormente al formato solicitado por la librer√≠a agregando las\r clases necesarias.\r Botones:\r En este caso la tarea es m√°s sencilla, es preciso capturar los botones de\r + y ‚Äì en las vistas de item.html y carrito.html y desde un archivo\r JavaScript cambiar el valor del input con la cantidad de √≠tems en cada\r click, sumando o restando una unidad dependiendo el bot√≥n presionado.\r Tambi√©n coloca una validaci√≥n para evitar la selecci√≥n de n√∫meros\r negativos.\r Mission#4 ÔøΩ\r <p>\r Lleg√≥ el momento de migrar nuestro proyecto Frontend a un esquema\r Fullstack, preparando todo lo necesario para crear nuestro backend e\r integrar ambos desarrollos.\r Por eso para este mission necesitaremos:\r 1. Migrar nuestro c√≥digo a un proyecto de NodeJS + Express.\r 2. Crear un servidor que devuelva archivos est√°ticos declarando una\r carpeta 'public'.\r </p>\r Mission#5\r <p>\r En esta ocasi√≥n nos concentraremos en migrar nuestros archivos HTML\r al motor de plantillas EJS, adem√°s crearemos la l√≥gica necesaria para\r devolver estos archivos y sus datos frente a la petici√≥n de las diferentes\r rutas de nuestra aplicaci√≥n.\r Para esto debemos llevar adelante las siguientes tareas:\r - Instalar y configurar el motor de plantillas EJS.\r - Migrar los archivos HTML del proyecto a la capa de VISTA de\r nuestra aplicaci√≥n MVC -> ruta: src/views\r - Crear una carpeta partials en la ruta src/views/, crear los archivos\r - Incluir el header y el footer a cada vista del site.\r - Adaptar los componentes internos de cada vista en los casos que\r se deban recibir datos din√°micos desde el controlador. Por ej. en la\r vista de SHOP en lugar de tener 9 cards con items est√°ticos, crear\r la l√≥gica para que el c√≥digo HTML de una sola card se repita todas\r las veces necesarias como tantos items reciba.",
  "main": "app.js",
  "type": "module",
  "scripts": {
    "test": "echo\"Error: no test specified\" && exit 1",
    "dev": "nodemon app.js",
    "start": "node app.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "ejs": "^3.1.9",
    "express": "^4.18.2",
    "mysql2": "^3.6.5",
    "request": "^2.88.2",
    "sequelize": "^6.35.2"
  },
  "devDependencies": {
    "gulp": "^4.0.2",
    "nodemon": "^3.0.2"
  }
}
